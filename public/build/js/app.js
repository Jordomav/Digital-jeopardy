!function(){"use strict";angular.module("jeopardyApp",["ngTouch"])}(),function(){"use strict";angular.module("jeopardyApp").controller("adminController",function(){var e=this;e.questionType=null,e.setQuestionType=function(t){e.questionType=t},e.getQuestionType=function(t){return e.questionType?e.questionType:(t&&(console.log(t),t=JSON.parse(t),_.has(t,"question")?e.questionType="text":_.has(t,"image")&&(e.questionType="image")),"text")}})}(),function(){"use strict";angular.module("jeopardyApp").controller("buzzerController",["$scope","$http","$timeout",function(e,t,n){var o=this;o.allPlayersWhoBuzzed=[],o.firstPlayerWhoBuzzed=null,o.thisPlayer=null;var a=io("http://192.168.10.10:3000");a.on("buzzer-channel:App\\Events\\PlayerHitBuzzer",function(t){o.disableBuzzer(),o.allPlayersWhoBuzzed.push(t.player),e.$apply()}),o.init=function(e){o.thisPlayer=e};o.disableBuzzer=function(){return o.allPlayersWhoBuzzed.length>0?!0:void 0},o.broadcastToAllPlayersInGame=function(){t.get("buzz")},o.enabledness=function(){return o.disableBuzzer()===!0?"buzzer-disabled":void 0},o.getFirstPlayerWhoBuzzedIn=function(){o.firstPlayerWhoBuzzed=o.allPlayersWhoBuzzed[0]}}])}(),function(){"use strict";angular.module("jeopardyApp").controller("jeopardyController",["$http","Jeopardy",function(e,t){function n(){t.init().then(function(){a.gameData=t.gameData,o()})}function o(){_.forEach(a.gameData.categories,function(e){e.questions=[];var t=100,n=1;_.forEach(a.gameData.questions,function(o){o.category_id===e._id&&(o.money=t*n,e.questions.push(o),n++)}),a.categories.push(e)}),console.log(a.categories)}var a=this;a.testing="hi hi hi",a.gameData=[],a.categories=[],n(),a.selectQuestion=function(e){a.selectedQuestion=e,t.selectQuestion(e)},a.toggleShowAnswer=function(){a.selectedQuestion.showAnswer=!a.selectedQuestion.showAnswer},a.returnToGameboard=function(){t.returnToGameboard()},a.buttonClick=function(){console.log("Hello")}}])}(),function(){"use strict";angular.module("jeopardyApp").service("Jeopardy",["$http",function(e){function t(){return e.get("get-categories")}var n=this;n.gameData=[],n.init=function(){return t().then(function(e){n.gameData=e.data},function(e){alert("There was an error retrieving game data."),console.log(e)})},n.selectQuestion=function(e){e.selected=!0,Custombox.open({target:"#modal",effect:"push"})},n.returnToGameboard=function(){Custombox.close()}}])}();
//# sourceMappingURL=data:application/json;base64,
