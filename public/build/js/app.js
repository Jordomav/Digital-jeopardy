!function(){"use strict";angular.module("jeopardyApp",["ngTouch"])}(),function(){"use strict";angular.module("jeopardyApp").controller("adminController",function(){var e=this;e.questionType=null,e.setQuestionType=function(n){e.questionType=n},e.getQuestionType=function(n){return e.questionType?e.questionType:(n&&(console.log(n),n=JSON.parse(n),_.has(n,"question")?e.questionType="text":_.has(n,"image")&&(e.questionType="image")),"text")}})}(),function(){"use strict";angular.module("jeopardyApp").controller("buzzerController",["$scope","$http","$timeout",function(e,n,o){var t=this;t.allPlayersWhoBuzzed=[],t.firstPlayerWhoBuzzed=null,t.thisPlayer=null,t.pusher=new Pusher("4792c6294d140acf74ba"),t.pusherChannel=t.pusher.subscribe("buzzer-channel"),t.pusherChannel.bind("App\\Events\\PlayerHitBuzzer",function(n){t.allPlayersWhoBuzzed.push(n.player),t.disableBuzzer(),e.$apply()}),Pusher.log=function(e){window.console&&window.console.log&&window.console.log(e)},t.init=function(e){t.thisPlayer=JSON.parse(e)};t.disableBuzzer=function(){return t.allPlayersWhoBuzzed.length>0?!0:void 0},t.broadcastToAllPlayersInGame=function(){n.get("buzz")},t.enabledness=function(){return t.disableBuzzer()===!0?"buzzer-disabled":void 0},t.getFirstPlayerWhoBuzzedIn=function(){t.firstPlayerWhoBuzzed=t.allPlayersWhoBuzzed[0]}}])}(),function(){"use strict";angular.module("jeopardyApp").controller("jeopardyController",["$http","Jeopardy",function(e,n){function o(e){n.init(e).then(function(){console.log(n.gameData),u.gameData=n.gameData.game,t()})}function t(){_.forEach(u.gameData.categories,function(e){var n=100,o=1;_.forEach(e.questions,function(e){e.money=n*o,o++}),u.categories.push(e)})}var u=this;u.gameData=[],u.categories=[],u.setGame=function(e){o(e)},u.selectQuestion=function(e){u.selectedQuestion=e,n.selectQuestion(e)},u.toggleShowAnswer=function(){u.selectedQuestion.showAnswer=!u.selectedQuestion.showAnswer},u.returnToGameboard=function(){n.returnToGameboard()},u.buttonClick=function(){console.log("Hello")}}])}(),function(){"use strict";angular.module("jeopardyApp").service("Jeopardy",["$http",function(e){function n(n){return console.log(n),e.get("/get-categories/"+n)}var o=this;o.gameData=[],o.init=function(e){return n(e).then(function(e){o.gameData=e.data},function(e){alert("There was an error retrieving game data."),console.log(e)})},o.selectQuestion=function(e){e.selected=!0,Custombox.open({target:"#modal",effect:"push"})},o.returnToGameboard=function(){Custombox.close()}}])}();
//# sourceMappingURL=data:application/json;base64,
