!function(){"use strict";angular.module("jeopardyApp",["ngTouch"])}(),function(){"use strict";angular.module("jeopardyApp").controller("adminController",function(){var e=this;e.questionType=null,e.setQuestionType=function(n){e.questionType=n},e.getQuestionType=function(n){return e.questionType?e.questionType:(n&&(console.log(n),n=JSON.parse(n),_.has(n,"question")?e.questionType="text":_.has(n,"image")&&(e.questionType="image")),"text")}})}(),function(){"use strict";angular.module("jeopardyApp").controller("buzzerController",["$scope","$http","Buzzer","$timeout",function(e,n,t,o){var r=this;r.allPlayersWhoBuzzed=[],r.firstPlayerWhoBuzzed=null,r.thisPlayer=null,r.thisGameJoinCode=null,r.enabledness="buzzer-enabled",r.pusher=new Pusher("4792c6294d140acf74ba"),r.init=function(n,t){console.log(n,t),r.thisPlayer=JSON.parse(n),r.thisGameJoinCode=t,r.pusherBuzzEventChannel=r.pusher.subscribe("buzz."+r.thisGameJoinCode),r.pusherBuzzEventChannel.bind("App\\Events\\PlayerHitBuzzer",function(n){r.allPlayersWhoBuzzed.push(n.player),console.log(r.allPlayersWhoBuzzed),r.toggleBuzzerDisabledness(),e.$apply()}),r.pusherResetEventChannel=r.pusher.subscribe("buzzer-reset."+r.thisGameJoinCode),r.pusherResetEventChannel.bind("App\\Events\\ResetBuzzer",function(n){r.enableBuzzer(),e.$apply()})},Pusher.log=function(e){window.console&&window.console.log&&window.console.log(e)},r.toggleBuzzerDisabledness=function(){return r.allPlayersWhoBuzzed.length>0},r.enableBuzzer=function(){r.allPlayersWhoBuzzed=[],r.firstPlayerWhoBuzzed=null},r.broadcastToAllPlayersInGame=function(){n.get("/buzz/"+r.thisGameJoinCode)},r.enabledness=function(){return r.toggleBuzzerDisabledness()===!0?"buzzer-disabled":"buzzer-enabled"},r.getFirstPlayerWhoBuzzedIn=function(){r.firstPlayerWhoBuzzed=r.allPlayersWhoBuzzed[0],console.log(r.firstPlayerWhoBuzzed)}}])}(),function(){"use strict";angular.module("jeopardyApp").service("Buzzer",["$http",function(e){var n=this;n.resetBuzzers=function(n){e.get("/reset-buzzer/"+n)}}])}(),function(){"use strict";angular.module("jeopardyApp").controller("jeopardyController",["$http","Jeopardy","Buzzer",function(e,n,t){function o(e){n.init(e).then(function(){console.log(n.gameData),s.gameData=n.gameData.game,r()})}function r(){_.forEach(s.gameData.categories,function(e){var n=100,t=1;_.forEach(e.questions,function(e){e.money=n*t,t++}),s.categories.push(e)})}var s=this;s.gameData=[],s.categories=[],s.setGame=function(e){o(e)},s.selectQuestion=function(e){s.selectedQuestion=e,n.selectQuestion(e)},s.toggleShowAnswer=function(){s.selectedQuestion.showAnswer=!s.selectedQuestion.showAnswer},s.returnToGameboard=function(e){n.returnToGameboard(),s.resetBuzzers(e)},s.resetBuzzers=function(e){t.resetBuzzers(e)}}])}(),function(){"use strict";angular.module("jeopardyApp").service("Jeopardy",["$http",function(e){function n(n){return console.log(n),e.get("/get-categories/"+n)}var t=this;t.gameData=[],t.init=function(e){return n(e).then(function(e){t.gameData=e.data},function(e){alert("There was an error retrieving game data."),console.log(e)})},t.selectQuestion=function(e){e.selected=!0,Custombox.open({target:"#modal",effect:"push"})},t.returnToGameboard=function(){Custombox.close()}}])}(),function(){"use strict";angular.module("jeopardyApp").controller("playersController",function(){var e=io(),n=this;n.users=[],e.on("test-channel:UserSignedUp",function(e){n.users.push(e.username)})})}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImplb3BhcmR5LmFwcC5qcyIsImFkbWluL2FkbWluLmNvbnRyb2xsZXIuanMiLCJidXp6ZXIvYnV6emVyLmNvbnRyb2xsZXIuanMiLCJidXp6ZXIvYnV6emVyLnNlcnZpY2UuanMiLCJqZW9wYXJkeS9qZW9wYXJkeS5jb250cm9sbGVyLmpzIiwiamVvcGFyZHkvamVvcGFyZHkuc2VydmljZS5qcyIsImplb3BhcmR5L3BsYXllcnMuY29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsInZtIiwidGhpcyIsInF1ZXN0aW9uVHlwZSIsInNldFF1ZXN0aW9uVHlwZSIsInR5cGUiLCJnZXRRdWVzdGlvblR5cGUiLCJxdWVzdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwicGFyc2UiLCJfIiwiaGFzIiwiJHNjb3BlIiwiJGh0dHAiLCJCdXp6ZXIiLCIkdGltZW91dCIsImFsbFBsYXllcnNXaG9CdXp6ZWQiLCJmaXJzdFBsYXllcldob0J1enplZCIsInRoaXNQbGF5ZXIiLCJ0aGlzR2FtZUpvaW5Db2RlIiwiZW5hYmxlZG5lc3MiLCJwdXNoZXIiLCJQdXNoZXIiLCJpbml0IiwicHVzaGVyQnV6ekV2ZW50Q2hhbm5lbCIsInN1YnNjcmliZSIsImJpbmQiLCJidXp6RXZlbnQiLCJwdXNoIiwicGxheWVyIiwidG9nZ2xlQnV6emVyRGlzYWJsZWRuZXNzIiwiJGFwcGx5IiwicHVzaGVyUmVzZXRFdmVudENoYW5uZWwiLCJyZXNldEV2ZW50IiwiZW5hYmxlQnV6emVyIiwibWVzc2FnZSIsIndpbmRvdyIsImxlbmd0aCIsImJyb2FkY2FzdFRvQWxsUGxheWVyc0luR2FtZSIsImdldCIsImdldEZpcnN0UGxheWVyV2hvQnV6emVkSW4iLCJzZXJ2aWNlIiwicmVzZXRCdXp6ZXJzIiwiam9pbkNvZGUiLCJKZW9wYXJkeSIsInJlbmRlckdhbWVib2FyZCIsImlkIiwidGhlbiIsImdhbWVEYXRhIiwiZ2FtZSIsInBvcHVsYXRlQ2F0ZWdvcmllcyIsImZvckVhY2giLCJjYXRlZ29yaWVzIiwiY2F0ZWdvcnkiLCJtb25leSIsImkiLCJxdWVzdGlvbnMiLCJzZXRHYW1lIiwic2VsZWN0UXVlc3Rpb24iLCJzZWxlY3RlZFF1ZXN0aW9uIiwidG9nZ2xlU2hvd0Fuc3dlciIsInNob3dBbnN3ZXIiLCJyZXR1cm5Ub0dhbWVib2FyZCIsImdldEdhbWVEYXRhIiwicmVzIiwiZGF0YSIsImVyciIsImFsZXJ0Iiwic2VsZWN0ZWQiLCJDdXN0b21ib3giLCJvcGVuIiwidGFyZ2V0IiwiZWZmZWN0IiwiY2xvc2UiLCJzb2NrZXQiLCJpbyIsInVzZXJzIiwib24iLCJ1c2VybmFtZSJdLCJtYXBwaW5ncyI6IkNBQUEsV0FFQSxZQUVBQSxTQUFBQyxPQUFBLGVBQUEsZUNKQSxXQUVBLFlBRUFELFNBQUFDLE9BQUEsZUFDQUMsV0FBQSxrQkFBQSxXQUVBLEdBQUFDLEdBQUFDLElBRUFELEdBQUFFLGFBQUEsS0FFQUYsRUFBQUcsZ0JBQUEsU0FBQUMsR0FDQUosRUFBQUUsYUFBQUUsR0FHQUosRUFBQUssZ0JBQUEsU0FBQUMsR0FFQSxNQUFBTixHQUFBRSxhQUNBRixFQUFBRSxjQUdBSSxJQUNBQyxRQUFBQyxJQUFBRixHQUNBQSxFQUFBRyxLQUFBQyxNQUFBSixHQUNBSyxFQUFBQyxJQUFBTixFQUFBLFlBQ0FOLEVBQUFFLGFBQUEsT0FDQVMsRUFBQUMsSUFBQU4sRUFBQSxXQUNBTixFQUFBRSxhQUFBLFVBSUEsY0M5QkEsV0FFQSxZQUVBTCxTQUFBQyxPQUFBLGVBQ0FDLFdBQUEsb0JBQUEsU0FBQSxRQUFBLFNBQUEsV0FBQSxTQUFBYyxFQUFBQyxFQUFBQyxFQUFBQyxHQUVBLEdBQUFoQixHQUFBQyxJQUNBRCxHQUFBaUIsdUJBQ0FqQixFQUFBa0IscUJBQUEsS0FDQWxCLEVBQUFtQixXQUFBLEtBQ0FuQixFQUFBb0IsaUJBQUEsS0FDQXBCLEVBQUFxQixZQUFBLGlCQUtBckIsRUFBQXNCLE9BQUEsR0FBQUMsUUFBQSx3QkFFQXZCLEVBQUF3QixL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QUNBQyxLQUFBLFNBQUFpQixHQUNBakUsRUFBQWlELFNBQUFnQixFQUFBQyxNQUVBLFNBQUFDLEdBQ0FDLE1BQUEsNENBQ0E3RCxRQUFBQyxJQUFBMkQsTUFVQW5FLEVBQUEyRCxlQUFBLFNBQUFyRCxHQUNBQSxFQUFBK0QsVUFBQSxFQUVBQyxVQUFBQyxNQUNBQyxPQUFBLFNBQ0FDLE9BQUEsVUFJQXpFLEVBQUErRCxrQkFBQSxXQUNBTyxVQUFBSSxlQzFDQSxXQUVBLFlBRUE3RSxTQUFBQyxPQUFBLGVBQ0FDLFdBQUEsb0JBQUEsV0FFQSxHQUFBNEUsR0FBQUMsS0FFQTVFLEVBQUFDLElBRUFELEdBQUE2RSxTQUVBRixFQUFBRyxHQUFBLDRCQUFBLFNBQUFaLEdBQ0FsRSxFQUFBNkUsTUFBQWhELEtBQUFxQyxFQUFBYSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKVxue1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdqZW9wYXJkeUFwcCcsIFsnbmdUb3VjaCddKTtcblxufSgpKTsiLCIoZnVuY3Rpb24gKCkge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2plb3BhcmR5QXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ2FkbWluQ29udHJvbGxlcicsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdm0ucXVlc3Rpb25UeXBlID0gbnVsbDtcblxuICAgICAgICAgICAgdm0uc2V0UXVlc3Rpb25UeXBlID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgICAgICAgICB2bS5xdWVzdGlvblR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdm0uZ2V0UXVlc3Rpb25UeXBlID0gZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAodm0ucXVlc3Rpb25UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2bS5xdWVzdGlvblR5cGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHF1ZXN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb24gPSBKU09OLnBhcnNlKHF1ZXN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaGFzKHF1ZXN0aW9uLCAncXVlc3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdm0ucXVlc3Rpb25UeXBlID0gJ3RleHQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF8uaGFzKHF1ZXN0aW9uLCAnaW1hZ2UnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdm0ucXVlc3Rpb25UeXBlID0gJ2ltYWdlJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiAndGV4dCc7XG5cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG5cbn0oKSk7XG4iLCJcbihmdW5jdGlvbiAoKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnamVvcGFyZHlBcHAnKVxuICAgICAgICAuY29udHJvbGxlcignYnV6emVyQ29udHJvbGxlcicsIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCBCdXp6ZXIsICR0aW1lb3V0KSB7XG5cbiAgICAgICAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICAgICAgICB2bS5hbGxQbGF5ZXJzV2hvQnV6emVkID0gW107XG4gICAgICAgICAgICB2bS5maXJzdFBsYXllcldob0J1enplZCA9IG51bGw7XG4gICAgICAgICAgICB2bS50aGlzUGxheWVyID0gbnVsbDtcbiAgICAgICAgICAgIHZtLnRoaXNHYW1lSm9pbkNvZGUgPSBudWxsO1xuICAgICAgICAgICAgdm0uZW5hYmxlZG5lc3MgPSAnYnV6emVyLWVuYWJsZWQnO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuXG5cbiAgICAgICAgICAgIHZtLnB1c2hlciA9IG5ldyBQdXNoZXIoJzQ3OTJjNjI5NGQxNDBhY2Y3NGJhJyk7IC8vIFB1c2hlciBhcHAga2V5XG5cbiAgICAgICAgICAgIHZtLmluaXQgPSBmdW5jdGlvbiAodGhpc1BsYXllciwgdGhpc0dhbWVKb2luQ29kZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXNQbGF5ZXIsIHRoaXNHYW1lSm9pbkNvZGUpO1xuICAgICAgICAgICAgICAgIHZtLnRoaXNQbGF5ZXIgPSBKU09OLnBhcnNlKHRoaXNQbGF5ZXIpO1xuICAgICAgICAgICAgICAgIHZtLnRoaXNHYW1lSm9pbkNvZGUgPSB0aGlzR2FtZUpvaW5Db2RlO1xuXG4gICAgICAgICAgICAgICAgdm0ucHVzaGVyQnV6ekV2ZW50Q2hhbm5lbCA9IHZtLnB1c2hlci5zdWJzY3JpYmUoJ2J1enouJyArIHZtLnRoaXNHYW1lSm9pbkNvZGUpO1xuICAgICAgICAgICAgICAgIHZtLnB1c2hlckJ1enpFdmVudENoYW5uZWwuYmluZCgnQXBwXFxcXEV2ZW50c1xcXFxQbGF5ZXJIaXRCdXp6ZXInLCBmdW5jdGlvbiAoYnV6ekV2ZW50KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdm0uYWxsUGxheWVyc1dob0J1enplZC5wdXNoKGJ1enpFdmVudC5wbGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh2bS5hbGxQbGF5ZXJzV2hvQnV6emVkKTtcblxuICAgICAgICAgICAgICAgICAgICB2bS50b2dnbGVCdXp6ZXJEaXNhYmxlZG5lc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgLy8gdm0ucHVzaGVyUmVzZXRFdmVudENoYW5uZWwgPSB2bS5wdXNoZXIuc3Vic2NyaWJlKCdidXp6ZXItcmVzZXQuJyArIHZtLnRoaXNHYW1lSm9pbkNvZGUpO1xuICAgICAgICAgICAgICAgIHZtLnB1c2hlclJlc2V0RXZlbnRDaGFubmVsID0gdm0ucHVzaGVyLnN1YnNjcmliZSgnYnV6emVyLXJlc2V0LicgKyB2bS50aGlzR2FtZUpvaW5Db2RlKTtcbiAgICAgICAgICAgICAgICB2bS5wdXNoZXJSZXNldEV2ZW50Q2hhbm5lbC5iaW5kKCdBcHBcXFxcRXZlbnRzXFxcXFJlc2V0QnV6emVyJywgZnVuY3Rpb24gKHJlc2V0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdm0uZW5hYmxlQnV6emVyKCk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cblxuXG4gICAgICAgICAgICAvLyBFbmFibGUgUHVzaGVyIGxvZ3NcbiAgICAgICAgICAgIFB1c2hlci5sb2cgPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLmxvZykge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdm0udG9nZ2xlQnV6emVyRGlzYWJsZWRuZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2bS5hbGxQbGF5ZXJzV2hvQnV6emVkLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2bS5lbmFibGVCdXp6ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdm0uYWxsUGxheWVyc1dob0J1enplZCA9IFtdO1xuICAgICAgICAgICAgICAgIHZtLmZpcnN0UGxheWVyV2hvQnV6emVkID0gbnVsbDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIFRPRE86IFdlIG5lZWQgdG8gYnJvYWRjYXN0IHRoaXMgZm9yIHRoZSBzcGVjaWZpYyBnYW1lIHRoZSBwbGF5ZXIgaXMgYSBwYXJ0IG9mLlxuICAgICAgICAgICAgdm0uYnJvYWRjYXN0VG9BbGxQbGF5ZXJzSW5HYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL2J1enovJyArIHZtLnRoaXNHYW1lSm9pbkNvZGUpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gUmV0dXJucyBjc3MgY2xhc3MgZm9yIGdyYXkgYnV6emVyIHRvIG5nLWNsYXNzXG4gICAgICAgICAgICB2bS5lbmFibGVkbmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodm0udG9nZ2xlQnV6emVyRGlzYWJsZWRuZXNzKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdidXp6ZXItZGlzYWJsZWQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnYnV6emVyLWVuYWJsZWQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIFRPRE86IHB1c2hlciBzb21ldGltZXMgcmVjZWl2ZXMgY2xvc2UgZXZlbnRzIG91dCBvZiBzZXF1ZW5jZS4gRmlndXJlIG91dCBob3cgdG8gaGFuZGxlIHRoaXMuXG4gICAgICAgICAgICAvLyAodG9kbyBjb250Li4uKSBBbHNvIGNsZWFuIHRoaXMgY3JhcCB1cC5cbiAgICAgICAgICAgIHZtLmdldEZpcnN0UGxheWVyV2hvQnV6emVkSW4gPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICB2bS5maXJzdFBsYXllcldob0J1enplZCA9IHZtLmFsbFBsYXllcnNXaG9CdXp6ZWRbMF07XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codm0uZmlyc3RQbGF5ZXJXaG9CdXp6ZWQpO1xuXG4gICAgICAgICAgICAgICAgLy8gdmFyIG1pbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblxuICAgICAgICAgICAgICAgIC8vIHZhciBmaXJzdFBsYXllcldob0J1enplZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBpZih2bS5hbGxQbGF5ZXJzV2hvQnV6emVkLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgZmlyc3RQbGF5ZXJXaG9CdXp6ZWQgPSB2bS5hbGxQbGF5ZXJzV2hvQnV6emVkWzBdO1xuXG4gICAgICAgICAgICAgICAgLy8gICAgIC8vIF8uZWFjaCh2bS5hbGxQbGF5ZXJzV2hvQnV6emVkLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgIC8vICAgICB2YXIgdGltZXN0YW1wID0gcGFyc2VJbnQocGxheWVyLmxhc3RfYnV6ei5zbGljZShwbGF5ZXIubGFzdF9idXp6Lmxlbmd0aCAtIDEyKSk7XG4gICAgICAgICAgICAgICAgLy8gICAgIC8vICAgICBjb25zb2xlLmxvZyhwbGF5ZXIubmFtZSArICc6ICcgKyB0aW1lc3RhbXApO1xuICAgICAgICAgICAgICAgIC8vICAgICAvLyAgICAgaWYgKHRpbWVzdGFtcCA8IG1pbikge1xuICAgICAgICAgICAgICAgIC8vICAgICAvLyAgICAgICAgIG1pbiA9IHRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICAvLyAgICAgLy8gICAgICAgICBmaXJzdFBsYXllcldob0J1enplZCA9IHBsYXllcjtcbiAgICAgICAgICAgICAgICAvLyAgICAgLy8gICAgIH1cbiAgICAgICAgICAgICAgICAvLyAgICAgLy8gfSk7XG4gICAgICAgICAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgZmlyc3RQbGF5ZXJXaG9CdXp6ZWQgPSB2bS5hbGxQbGF5ZXJzV2hvQnV6emVkWzBdO1xuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIHZtLmZpcnN0UGxheWVyV2hvQnV6emVkID0gZmlyc3RQbGF5ZXJXaG9CdXp6ZWQ7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIH0pO1xufSgpKTtcbiIsIlxuKGZ1bmN0aW9uICgpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdqZW9wYXJkeUFwcCcpXG4gICAgICAgIC5zZXJ2aWNlKCdCdXp6ZXInLCBmdW5jdGlvbiAoJGh0dHApIHtcblxuICAgICAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICAgICAgdm0ucmVzZXRCdXp6ZXJzID0gZnVuY3Rpb24gKGpvaW5Db2RlKSB7XG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvcmVzZXQtYnV6emVyLycgKyBqb2luQ29kZSk7XG4gICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgfSk7XG59KCkpO1xuIiwiXG4oZnVuY3Rpb24oKVxue1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdqZW9wYXJkeUFwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdqZW9wYXJkeUNvbnRyb2xsZXInLCBmdW5jdGlvbigkaHR0cCwgSmVvcGFyZHksIEJ1enplcil7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZtLmdhbWVEYXRhID0gW107XG4gICAgICAgICAgICB2bS5jYXRlZ29yaWVzID0gW107XG5cblxuICAgICAgICAgICAgdm0uc2V0R2FtZSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgIHJlbmRlckdhbWVib2FyZChpZCk7XG4gICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlbmRlckdhbWVib2FyZChpZCkge1xuICAgICAgICAgICAgICAgIEplb3BhcmR5LmluaXQoaWQpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhKZW9wYXJkeS5nYW1lRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5nYW1lRGF0YSA9IEplb3BhcmR5LmdhbWVEYXRhLmdhbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZUNhdGVnb3JpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgLy8gTmVzdCBRdWVzdGlvbnMgaW5zaWRlIG9mIHRoZWlyIGFzc29jaWF0ZWQgY2F0ZWdvcmllcyBzbyB0aGF0IHdlIGhhdmUgYSBtb3JlIGludGVsbGlnaWJsZSBvYmplY3QgdG9cbiAgICAgICAgICAgIC8vIHVzZSBpbiBvdXIgdmlldy5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHBvcHVsYXRlQ2F0ZWdvcmllcygpIHtcblxuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh2bS5nYW1lRGF0YS5jYXRlZ29yaWVzLCBmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9uZXkgPSAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gMTtcblxuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goY2F0ZWdvcnkucXVlc3Rpb25zLCBmdW5jdGlvbiAocXVlc3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy9Bc3NpZ24gbW9uZXRhcnkgdmFsdWUgdG8gZWFjaCBxdWVzdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb24ubW9uZXkgPSAobW9uZXkgKiBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdm0uY2F0ZWdvcmllcy5wdXNoKGNhdGVnb3J5KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICB2bS5zZWxlY3RRdWVzdGlvbiA9IGZ1bmN0aW9uIChxdWVzdGlvbikge1xuICAgICAgICAgICAgICAgIHZtLnNlbGVjdGVkUXVlc3Rpb24gPSBxdWVzdGlvbjtcbiAgICAgICAgICAgICAgICBKZW9wYXJkeS5zZWxlY3RRdWVzdGlvbihxdWVzdGlvbik7XG4gICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgICAgIHZtLnRvZ2dsZVNob3dBbnN3ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdm0uc2VsZWN0ZWRRdWVzdGlvbi5zaG93QW5zd2VyID0gISh2bS5zZWxlY3RlZFF1ZXN0aW9uLnNob3dBbnN3ZXIpO1xuICAgICAgICAgICAgfTtcblxuXG4gICAgICAgICAgICB2bS5yZXR1cm5Ub0dhbWVib2FyZCA9IGZ1bmN0aW9uIChqb2luQ29kZSkge1xuICAgICAgICAgICAgICAgIEplb3BhcmR5LnJldHVyblRvR2FtZWJvYXJkKCk7XG4gICAgICAgICAgICAgICAgdm0ucmVzZXRCdXp6ZXJzKGpvaW5Db2RlKTtcbiAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgdm0ucmVzZXRCdXp6ZXJzID0gZnVuY3Rpb24gKGpvaW5Db2RlKSB7XG4gICAgICAgICAgICAgICAgQnV6emVyLnJlc2V0QnV6emVycyhqb2luQ29kZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxufSgpKTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgTmVpbCBTdHJhaW4gb24gNC8yOC8yMDE2LlxuICovXG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnamVvcGFyZHlBcHAnKVxuICAgICAgICAuc2VydmljZSgnSmVvcGFyZHknLCBmdW5jdGlvbiAoJGh0dHApIHtcblxuICAgICAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICAgICAgdm0uZ2FtZURhdGEgPSBbXTtcblxuICAgICAgICAgICAgdm0uaW5pdCA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRHYW1lRGF0YShpZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdm0uZ2FtZURhdGEgPSByZXMuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2soZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1RoZXJlIHdhcyBhbiBlcnJvciByZXRyaWV2aW5nIGdhbWUgZGF0YS4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRHYW1lRGF0YShpZCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGlkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvZ2V0LWNhdGVnb3JpZXMvJytpZCk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgdm0uc2VsZWN0UXVlc3Rpb24gPSBmdW5jdGlvbiAocXVlc3Rpb24pIHtcbiAgICAgICAgICAgICAgICBxdWVzdGlvbi5zZWxlY3RlZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBDdXN0b21ib3gub3Blbih7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogJyNtb2RhbCcsXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdDogJ3B1c2gnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2bS5yZXR1cm5Ub0dhbWVib2FyZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBDdXN0b21ib3guY2xvc2UoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfSk7XG5cblxufSgpKTtcbiIsIihmdW5jdGlvbigpXG57XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2plb3BhcmR5QXBwJylcbiAgICAgICAgLmNvbnRyb2xsZXIoJ3BsYXllcnNDb250cm9sbGVyJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICB2YXIgc29ja2V0ID0gaW8oKTtcblxuICAgICAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICAgICAgdm0udXNlcnMgPSBbXTtcblxuICAgICAgICAgICAgc29ja2V0Lm9uKCd0ZXN0LWNoYW5uZWw6VXNlclNpZ25lZFVwJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHZtLnVzZXJzLnB1c2goZGF0YS51c2VybmFtZSk7XG4gICAgICAgICAgICB9KTtcblxufSk7XG59KCkpO1xuXG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
