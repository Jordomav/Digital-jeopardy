!function(){"use strict";angular.module("jeopardyApp",["ngTouch"])}(),function(){"use strict";angular.module("jeopardyApp").controller("adminController",function(){var e=this;e.questionType=null,e.setQuestionType=function(o){e.questionType=o},e.getQuestionType=function(o){return e.questionType?e.questionType:(o&&(console.log(o),o=JSON.parse(o),_.has(o,"question")?e.questionType="text":_.has(o,"image")&&(e.questionType="image")),"text")}})}(),function(){"use strict";angular.module("jeopardyApp").controller("buzzerController",["$scope","$http","$timeout",function(e,o,n){var t=this;t.allPlayersWhoBuzzed=[],t.firstPlayerWhoBuzzed=null,t.thisPlayer=null,t.pusher=new Pusher("4792c6294d140acf74ba"),t.pusherChannel=t.pusher.subscribe("buzzer-channel"),t.pusherChannel.bind("App\\Events\\PlayerHitBuzzer",function(o){t.allPlayersWhoBuzzed.push(o.player),t.disableBuzzer(),e.$apply()}),Pusher.log=function(e){window.console&&window.console.log&&window.console.log(e)},t.init=function(e){t.thisPlayer=e};t.disableBuzzer=function(){return t.allPlayersWhoBuzzed.length>0?!0:void 0},t.broadcastToAllPlayersInGame=function(){o.get("buzz")},t.enabledness=function(){return t.disableBuzzer()===!0?"buzzer-disabled":void 0},t.getFirstPlayerWhoBuzzedIn=function(){t.firstPlayerWhoBuzzed=t.allPlayersWhoBuzzed[0]}}])}(),function(){"use strict";angular.module("jeopardyApp").controller("jeopardyController",["$http","Jeopardy",function(e,o){function n(e){o.init(e).then(function(){console.log(o.gameData),u.gameData=o.gameData,t()})}function t(){_.forEach(u.gameData.categories,function(e){e.questions=[];var o=100,n=1;_.forEach(u.gameData.questions,function(t){t.category_id===e._id&&(t.money=o*n,e.questions.push(t),n++)}),u.categories.push(e)}),console.log(u.categories)}var u=this;u.gameData=[],u.categories=[],u.setGame=function(e){n(e)},u.selectQuestion=function(e){u.selectedQuestion=e,o.selectQuestion(e)},u.toggleShowAnswer=function(){u.selectedQuestion.showAnswer=!u.selectedQuestion.showAnswer},u.returnToGameboard=function(){o.returnToGameboard()},u.buttonClick=function(){console.log("Hello")}}])}(),function(){"use strict";angular.module("jeopardyApp").service("Jeopardy",["$http",function(e){function o(o){return console.log(o),e.get("/get-categories/"+o)}var n=this;n.gameData=[],n.init=function(e){return o(e).then(function(e){console.log(e),n.gameData=e.data},function(e){alert("There was an error retrieving game data."),console.log(e)})},n.selectQuestion=function(e){e.selected=!0,Custombox.open({target:"#modal",effect:"push"})},n.returnToGameboard=function(){Custombox.close()}}])}();
//# sourceMappingURL=data:application/json;base64,
