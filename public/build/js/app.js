!function(){"use strict";angular.module("jeopardyApp",["ngTouch"])}(),function(){"use strict";angular.module("jeopardyApp").controller("jeopardyController",["$http","Jeopardy",function(e,t){function o(){t.init().then(function(){a.gameData=t.gameData,n()})}function n(){_.forEach(a.gameData.categories,function(e){e.questions=[];var t=100,o=1;_.forEach(a.gameData.questions,function(n){n.category_id===e._id&&(n.money=t*o,e.questions.push(n),o++)}),a.categories.push(e)}),console.log(a.categories)}console.log("called");var a=this;a.gameData=[],a.categories=[],o(),a.selectQuestion=function(e){a.selectedQuestion=e,t.selectQuestion(e)},a.toggleShowAnswer=function(){a.selectedQuestion.showAnswer=!a.selectedQuestion.showAnswer},a.returnToGameboard=function(){t.returnToGameboard()},a.buttonClick=function(){console.log("Hello")}}])}(),function(){"use strict";angular.module("jeopardyApp").service("Jeopardy",["$http",function(e){function t(){return e.get("get-categories")}var o=this;o.gameData=[],o.init=function(){return t().then(function(e){o.gameData=e.data},function(e){alert("There was an error retrieving game data."),console.log(e)})},o.selectQuestion=function(e){e.selected=!0,Custombox.open({target:"#modal",effect:"push"})},o.returnToGameboard=function(){Custombox.close()}}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImplb3BhcmR5LmFwcC5qcyIsImplb3BhcmR5L2plb3BhcmR5LmNvbnRyb2xsZXIuanMiLCJqZW9wYXJkeS9qZW9wYXJkeS5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJGh0dHAiLCJKZW9wYXJkeSIsInJlbmRlckdhbWVib2FyZCIsImluaXQiLCJ0aGVuIiwidm0iLCJnYW1lRGF0YSIsInBvcHVsYXRlQ2F0ZWdvcmllcyIsIl8iLCJmb3JFYWNoIiwiY2F0ZWdvcmllcyIsImNhdGVnb3J5IiwicXVlc3Rpb25zIiwibW9uZXkiLCJpIiwicXVlc3Rpb24iLCJjYXRlZ29yeV9pZCIsIl9pZCIsInB1c2giLCJjb25zb2xlIiwibG9nIiwidGhpcyIsInNlbGVjdFF1ZXN0aW9uIiwic2VsZWN0ZWRRdWVzdGlvbiIsInRvZ2dsZVNob3dBbnN3ZXIiLCJzaG93QW5zd2VyIiwicmV0dXJuVG9HYW1lYm9hcmQiLCJidXR0b25DbGljayIsInNlcnZpY2UiLCJnZXRHYW1lRGF0YSIsImdldCIsInJlcyIsImRhdGEiLCJlcnIiLCJhbGVydCIsInNlbGVjdGVkIiwiQ3VzdG9tYm94Iiwib3BlbiIsInRhcmdldCIsImVmZmVjdCIsImNsb3NlIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUVBLFlBRUFBLFNBQUFDLE9BQUEsZUFBQSxlQ0hBLFdBRUEsWUFFQUQsU0FBQUMsT0FBQSxlQUNBQyxXQUFBLHNCQUFBLFFBQUEsV0FBQSxTQUFBQyxFQUFBQyxHQVdBLFFBQUFDLEtBQ0FELEVBQUFFLE9BQ0FDLEtBQUEsV0FDQUMsRUFBQUMsU0FBQUwsRUFBQUssU0FDQUMsTUFNQSxRQUFBQSxLQUVBQyxFQUFBQyxRQUFBSixFQUFBQyxTQUFBSSxXQUFBLFNBQUFDLEdBRUFBLEVBQUFDLFlBQ0EsSUFBQUMsR0FBQSxJQUNBQyxFQUFBLENBRUFOLEdBQUFDLFFBQUFKLEVBQUFDLFNBQUFNLFVBQUEsU0FBQUcsR0FFQUEsRUFBQUMsY0FBQUwsRUFBQU0sTUFHQUYsRUFBQUYsTUFBQUEsRUFBQUMsRUFFQUgsRUFBQUMsVUFBQU0sS0FBQUgsR0FDQUQsT0FJQVQsRUFBQUssV0FBQVEsS0FBQVAsS0FFQVEsUUFBQUMsSUFBQWYsRUFBQUssWUF6Q0FTLFFBQUFDLElBQUEsU0FFQSxJQUFBZixHQUFBZ0IsSUFFQWhCLEdBQUFDLFlBQ0FELEVBQUFLLGNBRUFSLElBcUNBRyxFQUFBaUIsZUFBQSxTQUFBUCxHQUNBVixFQUFBa0IsaUJBQUFSLEVBQ0FkLEVBQUFxQixlQUFBUCxJQUdBVixFQUFBbUIsaUJBQUEsV0FDQW5CLEVBQUFrQixpQkFBQUUsWUFBQXBCLEVBQUFrQixpQkFBQSxZQUdBbEIsRUFBQXFCLGtCQUFBLFdBQ0F6QixFQUFBeUIscUJBR0FyQixFQUFBc0IsWUFBQSxXQUNBUixRQUFBQyxJQUFBLGdCQzlEQSxXQUVBLFlBRUF2QixTQUFBQyxPQUFBLGVBQ0E4QixRQUFBLFlBQUEsUUFBQSxTQUFBNUIsR0FpQkEsUUFBQTZCLEtBQ0EsTUFBQTdCLEdBQUE4QixJQUFBLGtCQWhCQSxHQUFBekIsR0FBQWdCLElBRUFoQixHQUFBQyxZQUVBRCxFQUFBRixLQUFBLFdBQ0EsTUFBQTBCLEtBQ0F6QixLQUFBLFNBQUEyQixHQUNBMUIsRUFBQUMsU0FBQXlCLEVBQUFDLE1BRUEsU0FBQUMsR0FDQUMsTUFBQSw0Q0FDQWYsUUFBQUMsSUFBQWEsTUFTQTVCLEVBQUFpQixlQUFBLFNBQUFQLEdBQ0FBLEVBQUFvQixVQUFBLEVBRUFDLFVBQUFDLE1BQ0FDLE9BQUEsU0FDQUMsT0FBQSxVQUlBbEMsRUFBQXFCLGtCQUFBLFdBQ0FVLFVBQUFJIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpXG57XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2plb3BhcmR5QXBwJywgWyduZ1RvdWNoJ10pO1xuXG59KCkpOyIsIlxuKGZ1bmN0aW9uKClcbntcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnamVvcGFyZHlBcHAnKVxuICAgICAgICAuY29udHJvbGxlcignamVvcGFyZHlDb250cm9sbGVyJywgZnVuY3Rpb24oJGh0dHAsIEplb3BhcmR5KXtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2NhbGxlZCcpO1xuXG4gICAgICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgICAgICB2bS5nYW1lRGF0YSA9IFtdO1xuICAgICAgICAgICAgdm0uY2F0ZWdvcmllcyA9IFtdO1xuXG4gICAgICAgICAgICByZW5kZXJHYW1lYm9hcmQoKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVuZGVyR2FtZWJvYXJkKCkge1xuICAgICAgICAgICAgICAgIEplb3BhcmR5LmluaXQoKVxuICAgICAgICAgICAgICAgICAgICAudGhlbiggZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdm0uZ2FtZURhdGEgPSBKZW9wYXJkeS5nYW1lRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVsYXRlQ2F0ZWdvcmllcygpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTmVzdCBRdWVzdGlvbnMgaW5zaWRlIG9mIHRoZWlyIGFzc29jaWF0ZWQgY2F0ZWdvcmllcyBzbyB0aGF0IHdlIGhhdmUgYSBtb3JlIGludGVsbGlnaWJsZSBvYmplY3QgdG9cbiAgICAgICAgICAgIC8vIHVzZSBpbiBvdXIgdmlldy5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHBvcHVsYXRlQ2F0ZWdvcmllcygpIHtcblxuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCggdm0uZ2FtZURhdGEuY2F0ZWdvcmllcywgZnVuY3Rpb24gKGNhdGVnb3J5KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkucXVlc3Rpb25zID0gW107XG4gICAgICAgICAgICAgICAgICAgIHZhciBtb25leSA9IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh2bS5nYW1lRGF0YS5xdWVzdGlvbnMsIGZ1bmN0aW9uIChxdWVzdGlvbikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb24uY2F0ZWdvcnlfaWQgPT09IGNhdGVnb3J5Ll9pZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9Bc3NpZ24gbW9uZXRhcnkgdmFsdWUgdG8gZWFjaCBxdWVzdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uLm1vbmV5ID0gKG1vbmV5ICogaSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeS5xdWVzdGlvbnMucHVzaChxdWVzdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB2bS5jYXRlZ29yaWVzLnB1c2goY2F0ZWdvcnkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHZtLmNhdGVnb3JpZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2bS5zZWxlY3RRdWVzdGlvbiA9IGZ1bmN0aW9uIChxdWVzdGlvbikge1xuICAgICAgICAgICAgICAgIHZtLnNlbGVjdGVkUXVlc3Rpb24gPSBxdWVzdGlvbjtcbiAgICAgICAgICAgICAgICBKZW9wYXJkeS5zZWxlY3RRdWVzdGlvbihxdWVzdGlvbik7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2bS50b2dnbGVTaG93QW5zd2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZtLnNlbGVjdGVkUXVlc3Rpb24uc2hvd0Fuc3dlciA9ICEodm0uc2VsZWN0ZWRRdWVzdGlvbi5zaG93QW5zd2VyKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZtLnJldHVyblRvR2FtZWJvYXJkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIEplb3BhcmR5LnJldHVyblRvR2FtZWJvYXJkKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2bS5idXR0b25DbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSGVsbG8nKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG59KCkpOyIsIi8qKlxuICogQ3JlYXRlZCBieSBOZWlsIFN0cmFpbiBvbiA0LzI4LzIwMTYuXG4gKi9cblxuKGZ1bmN0aW9uICgpIHtcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdqZW9wYXJkeUFwcCcpXG4gICAgICAgIC5zZXJ2aWNlKCdKZW9wYXJkeScsIGZ1bmN0aW9uICgkaHR0cCkge1xuXG4gICAgICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgICAgICB2bS5nYW1lRGF0YSA9IFtdO1xuXG4gICAgICAgICAgICB2bS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRHYW1lRGF0YSgpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmdhbWVEYXRhID0gcmVzLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdUaGVyZSB3YXMgYW4gZXJyb3IgcmV0cmlldmluZyBnYW1lIGRhdGEuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0R2FtZURhdGEoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnZ2V0LWNhdGVnb3JpZXMnKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICB2bS5zZWxlY3RRdWVzdGlvbiA9IGZ1bmN0aW9uIChxdWVzdGlvbikge1xuICAgICAgICAgICAgICAgIHF1ZXN0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIEN1c3RvbWJveC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAnI21vZGFsJyxcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiAncHVzaCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZtLnJldHVyblRvR2FtZWJvYXJkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIEN1c3RvbWJveC5jbG9zZSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICB9KTtcblxuXG59KCkpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
