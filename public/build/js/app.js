!function(){"use strict";angular.module("jeopardyApp",["ngTouch"])}(),function(){"use strict";angular.module("jeopardyApp").controller("adminController",function(){var e=this;e.questionType=null,e.setQuestionType=function(n){e.questionType=n},e.getQuestionType=function(n){return e.questionType?e.questionType:(n&&(console.log(n),n=JSON.parse(n),_.has(n,"question")?e.questionType="text":_.has(n,"image")&&(e.questionType="image")),"text")}})}(),function(){"use strict";angular.module("jeopardyApp").controller("jeopardyController",["$http","Jeopardy",function(e,n){function t(){n.init().then(function(){s.gameData=n.gameData,o()})}function o(){_.forEach(s.gameData.categories,function(e){e.questions=[];var n=100,t=1;_.forEach(s.gameData.questions,function(o){o.category_id===e._id&&(o.money=n*t,e.questions.push(o),t++)}),s.categories.push(e)}),console.log(s.categories)}var s=this;s.testing="hi hi hi",s.gameData=[],s.categories=[],t(),s.selectQuestion=function(e){s.selectedQuestion=e,n.selectQuestion(e)},s.toggleShowAnswer=function(){s.selectedQuestion.showAnswer=!s.selectedQuestion.showAnswer},s.returnToGameboard=function(){n.returnToGameboard()},s.buttonClick=function(){console.log("Hello")}}])}(),function(){"use strict";angular.module("jeopardyApp").service("Jeopardy",["$http",function(e){function n(){return e.get("get-categories")}var t=this;t.gameData=[],t.init=function(){return n().then(function(e){t.gameData=e.data},function(e){alert("There was an error retrieving game data."),console.log(e)})},t.selectQuestion=function(e){e.selected=!0,Custombox.open({target:"#modal",effect:"push"})},t.returnToGameboard=function(){Custombox.close()}}])}(),function(){"use strict";angular.module("jeopardyApp").controller("playersController",function(){var e=io(),n=this;n.users=[],e.on("test-channel:UserSignedUp",function(e){n.users.push(e.username)})})}(),function(){"use strict";angular.module("jeopardyApp").controller("pusherController",["$scope",function(e){var n=this;n.buzzEvents=["hi"],n.pusher=new Pusher("4792c6294d140acf74ba"),console.log(n.pusher),n.pusherChannel=n.pusher.subscribe("buzzer-channel"),n.pusherChannel.bind("App\\Events\\PlayerHitBuzzer",function(t){console.log("something just happened"),n.buzzEvents.push(t),console.log(n.buzzEvents),e.$apply()})}])}();
//# sourceMappingURL=data:application/json;base64,
