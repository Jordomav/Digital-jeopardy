!function(){"use strict";angular.module("jeopardyApp",["ngTouch"])}(),function(){"use strict";angular.module("jeopardyApp").controller("adminController",function(){var e=this;e.questionType=null,e.setQuestionType=function(t){e.questionType=t},e.getQuestionType=function(t){return e.questionType?e.questionType:(t&&(console.log(t),t=JSON.parse(t),_.has(t,"question")?e.questionType="text":_.has(t,"image")&&(e.questionType="image")),"text")}})}(),function(){"use strict";angular.module("jeopardyApp").controller("jeopardyController",["$http","Jeopardy",function(e,t){function n(){t.init().then(function(){s.gameData=t.gameData,o()})}function o(){_.forEach(s.gameData.categories,function(e){e.questions=[];var t=100,n=1;_.forEach(s.gameData.questions,function(o){o.category_id===e._id&&(o.money=t*n,e.questions.push(o),n++)}),s.categories.push(e)}),console.log(s.categories)}var s=this;s.testing="hi hi hi",s.gameData=[],s.categories=[],n(),s.selectQuestion=function(e){s.selectedQuestion=e,t.selectQuestion(e)},s.toggleShowAnswer=function(){s.selectedQuestion.showAnswer=!s.selectedQuestion.showAnswer},s.returnToGameboard=function(){t.returnToGameboard()},s.buttonClick=function(){console.log("Hello")}}])}(),function(){"use strict";angular.module("jeopardyApp").service("Jeopardy",["$http",function(e){function t(){return e.get("get-categories")}var n=this;n.gameData=[],n.init=function(){return t().then(function(e){n.gameData=e.data},function(e){alert("There was an error retrieving game data."),console.log(e)})},n.selectQuestion=function(e){e.selected=!0,Custombox.open({target:"#modal",effect:"push"})},n.returnToGameboard=function(){Custombox.close()}}])}(),function(){"use strict";angular.module("jeopardyApp").controller("pusherController",["$scope",function(e){var t=this;t.buzzEvents=["hi"],t.pusher=new Pusher("4792c6294d140acf74ba"),console.log(t.pusher),t.pusherChannel=t.pusher.subscribe("buzzer-channel"),t.pusherChannel.bind("App\\Events\\PlayerHitBuzzer",function(n){console.log("something just happened"),t.buzzEvents.push(n),console.log(t.buzzEvents),e.$apply()})}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImplb3BhcmR5LmFwcC5qcyIsImFkbWluL2FkbWluLmNvbnRyb2xsZXIuanMiLCJqZW9wYXJkeS9qZW9wYXJkeS5jb250cm9sbGVyLmpzIiwiamVvcGFyZHkvamVvcGFyZHkuc2VydmljZS5qcyIsInB1c2hlci9wdXNoZXIuY29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsInZtIiwidGhpcyIsInF1ZXN0aW9uVHlwZSIsInNldFF1ZXN0aW9uVHlwZSIsInR5cGUiLCJnZXRRdWVzdGlvblR5cGUiLCJxdWVzdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwicGFyc2UiLCJfIiwiaGFzIiwiJGh0dHAiLCJKZW9wYXJkeSIsInJlbmRlckdhbWVib2FyZCIsImluaXQiLCJ0aGVuIiwiZ2FtZURhdGEiLCJwb3B1bGF0ZUNhdGVnb3JpZXMiLCJmb3JFYWNoIiwiY2F0ZWdvcmllcyIsImNhdGVnb3J5IiwicXVlc3Rpb25zIiwibW9uZXkiLCJpIiwiY2F0ZWdvcnlfaWQiLCJfaWQiLCJwdXNoIiwidGVzdGluZyIsInNlbGVjdFF1ZXN0aW9uIiwic2VsZWN0ZWRRdWVzdGlvbiIsInRvZ2dsZVNob3dBbnN3ZXIiLCJzaG93QW5zd2VyIiwicmV0dXJuVG9HYW1lYm9hcmQiLCJidXR0b25DbGljayIsInNlcnZpY2UiLCJnZXRHYW1lRGF0YSIsImdldCIsInJlcyIsImRhdGEiLCJlcnIiLCJhbGVydCIsInNlbGVjdGVkIiwiQ3VzdG9tYm94Iiwib3BlbiIsInRhcmdldCIsImVmZmVjdCIsImNsb3NlIiwiJHNjb3BlIiwiYnV6ekV2ZW50cyIsInB1c2hlciIsIlB1c2hlciIsInB1c2hlckNoYW5uZWwiLCJzdWJzY3JpYmUiLCJiaW5kIiwiYnV6ekV2ZW50IiwiJGFwcGx5Il0sIm1hcHBpbmdzIjoiQ0FBQSxXQUVBLFlBRUFBLFNBQUFDLE9BQUEsZUFBQSxlQ0pBLFdBRUEsWUFFQUQsU0FBQUMsT0FBQSxlQUNBQyxXQUFBLGtCQUFBLFdBRUEsR0FBQUMsR0FBQUMsSUFFQUQsR0FBQUUsYUFBQSxLQUVBRixFQUFBRyxnQkFBQSxTQUFBQyxHQUNBSixFQUFBRSxhQUFBRSxHQUdBSixFQUFBSyxnQkFBQSxTQUFBQyxHQUVBLE1BQUFOLEdBQUFFLGFBQ0FGLEVBQUFFLGNBR0FJLElBQ0FDLFFBQUFDLElBQUFGLEdBQ0FBLEVBQUFHLEtBQUFDLE1BQUFKLEdBQ0FLLEVBQUFDLElBQUFOLEVBQUEsWUFDQU4sRUFBQUUsYUFBQSxPQUNBUyxFQUFBQyxJQUFBTixFQUFBLFdBQ0FOLEVBQUFFLGFBQUEsVUFJQSxjQzlCQSxXQUVBLFlBRUFMLFNBQUFDLE9BQUEsZUFDQUMsV0FBQSxzQkFBQSxRQUFBLFdBQUEsU0FBQWMsRUFBQUMsR0FXQSxRQUFBQyxLQUNBRCxFQUFBRSxPQUNBQyxLQUFBLFdBQ0FqQixFQUFBa0IsU0FBQUosRUFBQUksU0FDQUMsTUFNQSxRQUFBQSxLQUVBUixFQUFBUyxRQUFBcEIsRUFBQWtCLFNBQUFHLFdBQUEsU0FBQUMsR0FFQUEsRUFBQUMsWUFDQSxJQUFBQyxHQUFBLElBQ0FDLEVBQUEsQ0FFQWQsR0FBQVMsUUFBQXBCLEVBQUFrQixTQUFBSyxVQUFBLFNBQUFqQixHQUVBQSxFQUFBb0IsY0FBQUosRUFBQUssTUFHQXJCLEVBQUFrQixNQUFBQSxFQUFBQyxFQUVBSCxFQUFBQyxVQUFBSyxLQUFBdEIsR0FDQW1CLE9BSUF6QixFQUFBcUIsV0FBQU8sS0FBQU4sS0FFQWYsUUFBQUMsSUFBQVIsRUFBQXFCLFlBekNBLEdBQUFyQixHQUFBQyxJQUVBRCxHQUFBNkIsUUFBQSxXQUVBN0IsRUFBQWtCLFlBQ0FsQixFQUFBcUIsY0FFQU4sSUFxQ0FmLEVBQUE4QixlQUFBLFNBQUF4QixHQUNBTixFQUFBK0IsaUJBQUF6QixFQUNBUSxFQUFBZ0IsZUFBQXhCLElBR0FOLEVBQUFnQyxpQkFBQSxXQUNBaEMsRUFBQStCLGlCQUFBRSxZQUFBakMsRUFBQStCLGlCQUFBLFlBR0EvQixFQUFBa0Msa0JBQUEsV0FDQXBCLEVBQUFvQixxQkFHQWxDLEVBQUFtQyxZQUFBLFdBQ0E1QixRQUFBQyxJQUFBLGdCQzlEQSxXQUVBLFlBRUFYLFNBQUFDLE9BQUEsZUFDQXNDLFFBQUEsWUFBQSxRQUFBLFNBQUF2QixHQWlCQSxRQUFBd0IsS0FDQSxNQUFBeEIsR0FBQXlCLElBQUEsa0JBaEJBLEdBQUF0QyxHQUFBQyxJQUVBRCxHQUFBa0IsWUFFQWxCLEVBQUFnQixLQUFBLFdBQ0EsTUFBQXFCLEtBQ0FwQixLQUFBLFNBQUFzQixHQUNBdkMsRUFBQWtCLFNBQUFxQixFQUFBQyxNQUVBLFNBQUFDLEdBQ0FDLE1BQUEsNENBQ0FuQyxRQUFBQyxJQUFBaUMsTUFTQXpDLEVBQUE4QixlQUFBLFNBQUF4QixHQUNBQSxFQUFBcUMsVUFBQSxFQUVBQyxVQUFBQyxNQUNBQyxPQUFBLFNBQ0FDLE9BQUEsVUFJQS9DLEVBQUFrQyxrQkFBQSxXQUNBVSxVQUFBSSxlQ3hDQSxXQUVBLFlBRUFuRCxTQUFBQyxPQUFBLGVBQ0FDLFdBQUEsb0JBQUEsU0FBQSxTQUFBa0QsR0FFQSxHQUFBakQsR0FBQUMsSUFFQUQsR0FBQWtELFlBQUEsTUFFQWxELEVBQUFtRCxPQUFBLEdBQUFDLFFBQUEsd0JBQ0E3QyxRQUFBQyxJQUFBUixFQUFBbUQsUUFDQW5ELEVBQUFxRCxjQUFBckQsRUFBQW1ELE9BQUFHLFVBQUEsa0JBRUF0RCxFQUFBcUQsY0FBQUUsS0FBQSwrQkFBQSxTQUFBQyxHQUNBakQsUUFBQUMsSUFBQSwyQkFDQVIsRUFBQWtELFdBQUF0QixLQUFBNEIsR0FDQWpELFFBQUFDLElBQUFSLEVBQUFrRCxZQUNBRCxFQUFBUSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKVxyXG57XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2plb3BhcmR5QXBwJywgWyduZ1RvdWNoJ10pO1xyXG5cclxufSgpKTsiLCIoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnamVvcGFyZHlBcHAnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdhZG1pbkNvbnRyb2xsZXInLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdm0ucXVlc3Rpb25UeXBlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHZtLnNldFF1ZXN0aW9uVHlwZSA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5xdWVzdGlvblR5cGUgPSB0eXBlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdm0uZ2V0UXVlc3Rpb25UeXBlID0gZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZtLnF1ZXN0aW9uVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2bS5xdWVzdGlvblR5cGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocXVlc3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uID0gSlNPTi5wYXJzZShxdWVzdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaGFzKHF1ZXN0aW9uLCAncXVlc3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5xdWVzdGlvblR5cGUgPSAndGV4dCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfLmhhcyhxdWVzdGlvbiwgJ2ltYWdlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0ucXVlc3Rpb25UeXBlID0gJ2ltYWdlJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICd0ZXh0JztcclxuXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxufSgpKTtcclxuIiwiXHJcbihmdW5jdGlvbigpXHJcbntcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnamVvcGFyZHlBcHAnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdqZW9wYXJkeUNvbnRyb2xsZXInLCBmdW5jdGlvbigkaHR0cCwgSmVvcGFyZHkpe1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZtLnRlc3RpbmcgPSAnaGkgaGkgaGknO1xyXG5cclxuICAgICAgICAgICAgdm0uZ2FtZURhdGEgPSBbXTtcclxuICAgICAgICAgICAgdm0uY2F0ZWdvcmllcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgcmVuZGVyR2FtZWJvYXJkKCk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiByZW5kZXJHYW1lYm9hcmQoKSB7XHJcbiAgICAgICAgICAgICAgICBKZW9wYXJkeS5pbml0KClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbiggZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5nYW1lRGF0YSA9IEplb3BhcmR5LmdhbWVEYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZUNhdGVnb3JpZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gTmVzdCBRdWVzdGlvbnMgaW5zaWRlIG9mIHRoZWlyIGFzc29jaWF0ZWQgY2F0ZWdvcmllcyBzbyB0aGF0IHdlIGhhdmUgYSBtb3JlIGludGVsbGlnaWJsZSBvYmplY3QgdG9cclxuICAgICAgICAgICAgLy8gdXNlIGluIG91ciB2aWV3LlxyXG4gICAgICAgICAgICBmdW5jdGlvbiBwb3B1bGF0ZUNhdGVnb3JpZXMoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKCB2bS5nYW1lRGF0YS5jYXRlZ29yaWVzLCBmdW5jdGlvbiAoY2F0ZWdvcnkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkucXVlc3Rpb25zID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vbmV5ID0gMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKHZtLmdhbWVEYXRhLnF1ZXN0aW9ucywgZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb24uY2F0ZWdvcnlfaWQgPT09IGNhdGVnb3J5Ll9pZCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vQXNzaWduIG1vbmV0YXJ5IHZhbHVlIHRvIGVhY2ggcXVlc3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uLm1vbmV5ID0gKG1vbmV5ICogaSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkucXVlc3Rpb25zLnB1c2gocXVlc3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmNhdGVnb3JpZXMucHVzaChjYXRlZ29yeSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHZtLmNhdGVnb3JpZXMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2bS5zZWxlY3RRdWVzdGlvbiA9IGZ1bmN0aW9uIChxdWVzdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdm0uc2VsZWN0ZWRRdWVzdGlvbiA9IHF1ZXN0aW9uO1xyXG4gICAgICAgICAgICAgICAgSmVvcGFyZHkuc2VsZWN0UXVlc3Rpb24ocXVlc3Rpb24pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdm0udG9nZ2xlU2hvd0Fuc3dlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZtLnNlbGVjdGVkUXVlc3Rpb24uc2hvd0Fuc3dlciA9ICEodm0uc2VsZWN0ZWRRdWVzdGlvbi5zaG93QW5zd2VyKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZtLnJldHVyblRvR2FtZWJvYXJkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgSmVvcGFyZHkucmV0dXJuVG9HYW1lYm9hcmQoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZtLmJ1dHRvbkNsaWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0hlbGxvJyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcblxyXG59KCkpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IE5laWwgU3RyYWluIG9uIDQvMjgvMjAxNi5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnamVvcGFyZHlBcHAnKVxyXG4gICAgICAgIC5zZXJ2aWNlKCdKZW9wYXJkeScsIGZ1bmN0aW9uICgkaHR0cCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHZtLmdhbWVEYXRhID0gW107XHJcblxyXG4gICAgICAgICAgICB2bS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEdhbWVEYXRhKClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLmdhbWVEYXRhID0gcmVzLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdUaGVyZSB3YXMgYW4gZXJyb3IgcmV0cmlldmluZyBnYW1lIGRhdGEuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEdhbWVEYXRhKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnZ2V0LWNhdGVnb3JpZXMnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIHZtLnNlbGVjdFF1ZXN0aW9uID0gZnVuY3Rpb24gKHF1ZXN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBxdWVzdGlvbi5zZWxlY3RlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgQ3VzdG9tYm94Lm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogJyNtb2RhbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiAncHVzaCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdm0ucmV0dXJuVG9HYW1lYm9hcmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBDdXN0b21ib3guY2xvc2UoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxufSgpKTtcclxuIiwiXHJcbihmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdqZW9wYXJkeUFwcCcpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ3B1c2hlckNvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHNjb3BlKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdm0uYnV6ekV2ZW50cyA9IFsnaGknXTtcclxuXHJcbiAgICAgICAgICAgIHZtLnB1c2hlciA9IG5ldyBQdXNoZXIoJzQ3OTJjNjI5NGQxNDBhY2Y3NGJhJyk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHZtLnB1c2hlcik7XHJcbiAgICAgICAgICAgIHZtLnB1c2hlckNoYW5uZWwgPSB2bS5wdXNoZXIuc3Vic2NyaWJlKCdidXp6ZXItY2hhbm5lbCcpO1xyXG5cclxuICAgICAgICAgICAgdm0ucHVzaGVyQ2hhbm5lbC5iaW5kKCdBcHBcXFxcRXZlbnRzXFxcXFBsYXllckhpdEJ1enplcicsIGZ1bmN0aW9uIChidXp6RXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzb21ldGhpbmcganVzdCBoYXBwZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgdm0uYnV6ekV2ZW50cy5wdXNoKGJ1enpFdmVudCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh2bS5idXp6RXZlbnRzKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbn0oKSk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
