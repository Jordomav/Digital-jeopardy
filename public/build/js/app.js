!function(){"use strict";angular.module("jeopardyApp",["ngTouch"])}(),function(){"use strict";angular.module("jeopardyApp").controller("adminController",function(){var e=this;e.questionType=null,e.setQuestionType=function(o){e.questionType=o},e.getQuestionType=function(o){return e.questionType?e.questionType:(o&&(console.log(o),o=JSON.parse(o),_.has(o,"question")?e.questionType="text":_.has(o,"image")&&(e.questionType="image")),"text")}})}(),function(){"use strict";angular.module("jeopardyApp").controller("buzzerController",["$scope","$http","$timeout",function(e,o,n){var t=this;t.allPlayersWhoBuzzed=[],t.firstPlayerWhoBuzzed=null,t.thisPlayer=null,t.pusher=new Pusher("4792c6294d140acf74ba"),t.pusherChannel=t.pusher.subscribe("buzzer-channel"),t.pusherChannel.bind("App\\Events\\PlayerHitBuzzer",function(o){console.log(o),t.allPlayersWhoBuzzed.push(o.player),console.log(t.allPlayersWhoBuzzed),t.disableBuzzer(),e.$apply()}),Pusher.log=function(e){window.console&&window.console.log&&window.console.log(e)},t.init=function(e){t.thisPlayer=e};t.disableBuzzer=function(){return t.allPlayersWhoBuzzed.length>0?!0:void 0},t.broadcastToAllPlayersInGame=function(){o.get("buzz")},t.enabledness=function(){return t.disableBuzzer()===!0?"buzzer-disabled":void 0},t.getFirstPlayerWhoBuzzedIn=function(){var e=(Number.POSITIVE_INFINITY,null);e=t.allPlayersWhoBuzzed.length>1?t.allPlayersWhoBuzzed[0]:t.allPlayersWhoBuzzed[0],t.firstPlayerWhoBuzzed=e}}])}(),function(){"use strict";angular.module("jeopardyApp").controller("jeopardyController",["$http","Jeopardy",function(e,o){function n(){o.init().then(function(){u.gameData=o.gameData,t()})}function t(){_.forEach(u.gameData.categories,function(e){e.questions=[];var o=100,n=1;_.forEach(u.gameData.questions,function(t){t.category_id===e._id&&(t.money=o*n,e.questions.push(t),n++)}),u.categories.push(e)}),console.log(u.categories)}var u=this;u.testing="hi hi hi",u.gameData=[],u.categories=[],n(),u.selectQuestion=function(e){u.selectedQuestion=e,o.selectQuestion(e)},u.toggleShowAnswer=function(){u.selectedQuestion.showAnswer=!u.selectedQuestion.showAnswer},u.returnToGameboard=function(){o.returnToGameboard()},u.buttonClick=function(){console.log("Hello")}}])}(),function(){"use strict";angular.module("jeopardyApp").service("Jeopardy",["$http",function(e){function o(){return e.get("get-categories")}var n=this;n.gameData=[],n.init=function(){return o().then(function(e){n.gameData=e.data},function(e){alert("There was an error retrieving game data."),console.log(e)})},n.selectQuestion=function(e){e.selected=!0,Custombox.open({target:"#modal",effect:"push"})},n.returnToGameboard=function(){Custombox.close()}}])}();
//# sourceMappingURL=data:application/json;base64,
