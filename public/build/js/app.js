!function(){"use strict";angular.module("jeopardyApp",["ngTouch"])}(),function(){"use strict";angular.module("jeopardyApp").controller("buzzerController",["$scope","$http","$timeout",function(e,t,n){var o=this;o.allPlayersWhoBuzzed=[],o.firstPlayerWhoBuzzed=null,o.thisPlayer=null;var u=!0;o.pusher=new Pusher("4792c6294d140acf74ba"),o.pusherChannel=o.pusher.subscribe("buzzer-channel"),o.pusherChannel.bind("App\\Events\\PlayerHitBuzzer",function(t){u=!1,console.log(t.user.last_buzz),o.allPlayersWhoBuzzed.push(t.user),n(function(){1===o.allPlayersWhoBuzzed.length&&(o.firstPlayerWhoBuzzed=t.user),_.each(o.allPlayersWhoBuzzed,function(e){t.user.last_buzz<e.last_buzz&&(o.firstPlayerWhoBuzzed=t.user)}),e.$apply(),console.log(o.firstPlayerWhoBuzzed)},500)}),o.buttonDisabled=function(e){return o.thisPlayer=JSON.parse(e),u?void 0:o.allPlayersWhoBuzzed!==o.thisPlayer},o.broadcastToAllPlayersInGame=function(){t.get("buzz")},o.enabledness=function(e){return o.buttonDisabled(e)?"buzzer-disabled":void 0}}])}(),function(){"use strict";angular.module("jeopardyApp").controller("adminController",function(){var e=this;e.questionType=null,e.setQuestionType=function(t){e.questionType=t},e.getQuestionType=function(t){return e.questionType?e.questionType:(t&&(console.log(t),t=JSON.parse(t),_.has(t,"question")?e.questionType="text":_.has(t,"image")&&(e.questionType="image")),"text")}})}(),function(){"use strict";angular.module("jeopardyApp").controller("jeopardyController",["$http","Jeopardy",function(e,t){function n(){t.init().then(function(){u.gameData=t.gameData,o()})}function o(){_.forEach(u.gameData.categories,function(e){e.questions=[];var t=100,n=1;_.forEach(u.gameData.questions,function(o){o.category_id===e._id&&(o.money=t*n,e.questions.push(o),n++)}),u.categories.push(e)}),console.log(u.categories)}var u=this;u.testing="hi hi hi",u.gameData=[],u.categories=[],n(),u.selectQuestion=function(e){u.selectedQuestion=e,t.selectQuestion(e)},u.toggleShowAnswer=function(){u.selectedQuestion.showAnswer=!u.selectedQuestion.showAnswer},u.returnToGameboard=function(){t.returnToGameboard()},u.buttonClick=function(){console.log("Hello")}}])}(),function(){"use strict";angular.module("jeopardyApp").service("Jeopardy",["$http",function(e){function t(){return e.get("get-categories")}var n=this;n.gameData=[],n.init=function(){return t().then(function(e){n.gameData=e.data},function(e){alert("There was an error retrieving game data."),console.log(e)})},n.selectQuestion=function(e){e.selected=!0,Custombox.open({target:"#modal",effect:"push"})},n.returnToGameboard=function(){Custombox.close()}}])}();
//# sourceMappingURL=data:application/json;base64,
