!function(){"use strict";angular.module("jeopardyApp",["ngTouch"])}(),function(){"use strict";angular.module("jeopardyApp").controller("adminController",function(){var e=this;e.questionType=null,e.setQuestionType=function(t){e.questionType=t},e.getQuestionType=function(t){return e.questionType?e.questionType:(t&&(console.log(t),t=JSON.parse(t),_.has(t,"question")?e.questionType="text":_.has(t,"image")&&(e.questionType="image")),"text")}})}(),function(){"use strict";angular.module("jeopardyApp").controller("buzzerController",["$scope","$http","$timeout",function(e,t,o){var n=this;n.allPlayersWhoBuzzed=[],n.firstPlayerWhoBuzzed=null,n.thisPlayer=null;var u=io("http://192.168.10.10:3000");console.log(u),u.on("buzzer-channel:App\\Events\\PlayerHitBuzzer",function(e){console.log(e)}),n.init=function(e){n.thisPlayer=e};n.disableBuzzer=function(){return n.allPlayersWhoBuzzed.length>0?!0:void 0},n.broadcastToAllPlayersInGame=function(){t.get("buzz")},n.enabledness=function(){return n.disableBuzzer()===!0?"buzzer-disabled":void 0},n.getFirstPlayerWhoBuzzedIn=function(){n.firstPlayerWhoBuzzed=n.allPlayersWhoBuzzed[0]}}])}(),function(){"use strict";angular.module("jeopardyApp").controller("jeopardyController",["$http","Jeopardy",function(e,t){function o(){t.init().then(function(){u.gameData=t.gameData,n()})}function n(){_.forEach(u.gameData.categories,function(e){e.questions=[];var t=100,o=1;_.forEach(u.gameData.questions,function(n){n.category_id===e._id&&(n.money=t*o,e.questions.push(n),o++)}),u.categories.push(e)}),console.log(u.categories)}var u=this;u.testing="hi hi hi",u.gameData=[],u.categories=[],o(),u.selectQuestion=function(e){u.selectedQuestion=e,t.selectQuestion(e)},u.toggleShowAnswer=function(){u.selectedQuestion.showAnswer=!u.selectedQuestion.showAnswer},u.returnToGameboard=function(){t.returnToGameboard()},u.buttonClick=function(){console.log("Hello")}}])}(),function(){"use strict";angular.module("jeopardyApp").service("Jeopardy",["$http",function(e){function t(){return e.get("get-categories")}var o=this;o.gameData=[],o.init=function(){return t().then(function(e){o.gameData=e.data},function(e){alert("There was an error retrieving game data."),console.log(e)})},o.selectQuestion=function(e){e.selected=!0,Custombox.open({target:"#modal",effect:"push"})},o.returnToGameboard=function(){Custombox.close()}}])}();
//# sourceMappingURL=data:application/json;base64,
