!function(){"use strict";angular.module("jeopardyApp",["ngTouch"])}(),function(){"use strict";angular.module("jeopardyApp").controller("jeopardyController",["$http","Jeopardy",function(e,t){function n(){t.init().then(function(){i.gameData=t.gameData,o()})}function o(){_.forEach(i.gameData.categories,function(e){e.questions=[];var t=100,n=1;_.forEach(i.gameData.questions,function(o){o.category_id===e._id&&(o.money=t*n,e.questions.push(o),n++)}),i.categories.push(e)}),console.log(i.categories)}var i=this;i.testing="hi hi hi",i.gameData=[],i.categories=[],n(),i.selectQuestion=function(e){i.selectedQuestion=e,t.selectQuestion(e)},i.toggleShowAnswer=function(){i.selectedQuestion.showAnswer=!i.selectedQuestion.showAnswer},i.returnToGameboard=function(){t.returnToGameboard()},i.buttonClick=function(){console.log("Hello")}}])}(),function(){"use strict";angular.module("jeopardyApp").service("Jeopardy",["$http",function(e){function t(){return e.get("get-categories")}var n=this;n.gameData=[],n.init=function(){return t().then(function(e){n.gameData=e.data},function(e){alert("There was an error retrieving game data."),console.log(e)})},n.selectQuestion=function(e){e.selected=!0,Custombox.open({target:"#modal",effect:"push"})},n.returnToGameboard=function(){Custombox.close()}}])}(),function(){"use strict";angular.module("jeopardyApp").controller("playersController",function(){var e=io(),t=this;t.users=[],e.on("test-channel:UserSignedUp",function(e){t.users.push(e.username)})})}(),function(){"use strict";angular.module("jeopardyApp").controller("adminController",function(){var e=this;e.questionType=null,e.setQuestionType=function(t){e.questionType=t},e.getQuestionType=function(t){return e.questionType?e.questionType:(t&&(console.log(t),t=JSON.parse(t),_.has(t,"question")?e.questionType="text":_.has(t,"image")&&(e.questionType="image")),"text")}})}();
//# sourceMappingURL=data:application/json;base64,
