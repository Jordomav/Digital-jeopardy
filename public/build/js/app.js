!function(){"use strict";angular.module("jeopardyApp",["ngTouch"])}(),function(){"use strict";angular.module("jeopardyApp").controller("adminController",function(){var e=this;e.questionType=null,e.setQuestionType=function(t){e.questionType=t},e.getQuestionType=function(t){return e.questionType?e.questionType:(t&&(console.log(t),t=JSON.parse(t),_.has(t,"question")?e.questionType="text":_.has(t,"image")&&(e.questionType="image")),"text")}})}(),function(){"use strict";angular.module("jeopardyApp").controller("buzzerController",["$scope","$http","$timeout",function(e,t,o){var n=this;n.allPlayersWhoBuzzed=[],n.firstPlayerWhoBuzzed=null,n.thisPlayer=null;var a=!0;n.pusher=new Pusher("4792c6294d140acf74ba"),n.pusherChannel=n.pusher.subscribe("buzzer-channel"),n.pusherChannel.bind("App\\Events\\PlayerHitBuzzer",function(e){a=!1,console.log(parseInt(e.user.updated_at)),n.allPlayersWhoBuzzed.push(e.user)}),n.buttonDisabled=function(e){return n.thisPlayer=JSON.parse(e),a?void 0:n.allPlayersWhoBuzzed!==n.thisPlayer},n.broadcastToAllPlayersInGame=function(){t.get("buzz")},n.enabledness=function(e){return n.buttonDisabled(e)?"buzzer-disabled":void 0},n.getFirstPlayerWhoBuzzedIn=function(){var e=Math.max();console.log(e),_.each(n.allPlayersWhoBuzzed,function(t){console.log(t),parseInt(t.updated_at)<e&&console.log("hey"),n.firstPlayerWhoBuzzed=t}),console.log(n.firstPlayerWhoBuzzed)}}])}(),function(){"use strict";angular.module("jeopardyApp").controller("jeopardyController",["$http","Jeopardy",function(e,t){function o(){t.init().then(function(){a.gameData=t.gameData,n()})}function n(){_.forEach(a.gameData.categories,function(e){e.questions=[];var t=100,o=1;_.forEach(a.gameData.questions,function(n){n.category_id===e._id&&(n.money=t*o,e.questions.push(n),o++)}),a.categories.push(e)}),console.log(a.categories)}var a=this;a.testing="hi hi hi",a.gameData=[],a.categories=[],o(),a.selectQuestion=function(e){a.selectedQuestion=e,t.selectQuestion(e)},a.toggleShowAnswer=function(){a.selectedQuestion.showAnswer=!a.selectedQuestion.showAnswer},a.returnToGameboard=function(){t.returnToGameboard()},a.buttonClick=function(){console.log("Hello")}}])}(),function(){"use strict";angular.module("jeopardyApp").service("Jeopardy",["$http",function(e){function t(){return e.get("get-categories")}var o=this;o.gameData=[],o.init=function(){return t().then(function(e){o.gameData=e.data},function(e){alert("There was an error retrieving game data."),console.log(e)})},o.selectQuestion=function(e){e.selected=!0,Custombox.open({target:"#modal",effect:"push"})},o.returnToGameboard=function(){Custombox.close()}}])}();
//# sourceMappingURL=data:application/json;base64,
